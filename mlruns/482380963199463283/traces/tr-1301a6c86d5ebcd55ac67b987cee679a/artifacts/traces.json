{"spans": [{"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "WAhr1gRx1Zk=", "parent_span_id": null, "name": "TextClassifier.forward", "start_time_unix_nano": 1761381975002612400, "end_time_unix_nano": 1761381987944409700, "events": [{"name": "exception", "time_unix_nano": 1761381987944409, "attributes": {"exception.message": "litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.", "exception.type": "BadRequestError", "exception.stacktrace": "Traceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 745, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 673, in completion\n    ) = self.make_sync_openai_chat_completion_request(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\logging_utils.py\", line 237, in sync_wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 489, in make_sync_openai_chat_completion_request\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 471, in make_sync_openai_chat_completion_request\n    raw_response = openai_client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_legacy_response.py\", line 364, in wrapped\n    return cast(LegacyAPIResponse[R], func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 286, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1156, in create\n    return self._post(\n           ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1259, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1047, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2137, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2109, in completion\n    response = openai_chat_completions.completion(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 756, in completion\n    raise OpenAIError(\nlitellm.llms.openai.common_utils.OpenAIError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\primitives\\module.py\", line 78, in __call__\n    return self.forward(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\benja\\AppData\\Local\\Temp\\ipykernel_5052\\71900812.py\", line 14, in forward\n    return self.generate_classification(text=text)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\predict\\predict.py\", line 103, in __call__\n    return super().__call__(**kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\primitives\\module.py\", line 78, in __call__\n    return self.forward(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\predict\\predict.py\", line 192, in forward\n    completions = adapter(lm, lm_kwargs=config, signature=signature, demos=demos, inputs=kwargs)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\chat_adapter.py\", line 47, in __call__\n    return JSONAdapter()(lm, lm_kwargs, signature, demos, inputs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\json_adapter.py\", line 82, in __call__\n    return super().__call__(lm, lm_kwargs, signature, demos, inputs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\chat_adapter.py\", line 46, in __call__\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\chat_adapter.py\", line 38, in __call__\n    return super().__call__(lm, lm_kwargs, signature, demos, inputs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\base.py\", line 127, in __call__\n    outputs = lm(messages=inputs, **lm_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\base_lm.py\", line 85, in __call__\n    response = self.forward(prompt=prompt, messages=messages, **kwargs)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 147, in forward\n    results = completion(\n              ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\cache.py\", line 235, in sync_wrapper\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 336, in litellm_completion\n    return litellm.completion(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1351, in wrapper\n    return litellm.completion_with_retries(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3771, in completion_with_retries\n    return retryer(original_function, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 475, in __call__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 478, in __call__\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1371, in wrapper\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys."}}], "status": {"code": "STATUS_CODE_ERROR", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"CHAIN\"", "mlflow.spanInputs": "{\"text\": \"I am interested in space\"}"}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "lUmSWJhyi6s=", "parent_span_id": "WAhr1gRx1Zk=", "name": "Predict.forward", "start_time_unix_nano": 1761381975078991700, "end_time_unix_nano": 1761381987933996700, "events": [{"name": "exception", "time_unix_nano": 1761381987933997, "attributes": {"exception.message": "litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.", "exception.type": "BadRequestError", "exception.stacktrace": "Traceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 745, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 673, in completion\n    ) = self.make_sync_openai_chat_completion_request(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\logging_utils.py\", line 237, in sync_wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 489, in make_sync_openai_chat_completion_request\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 471, in make_sync_openai_chat_completion_request\n    raw_response = openai_client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_legacy_response.py\", line 364, in wrapped\n    return cast(LegacyAPIResponse[R], func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 286, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1156, in create\n    return self._post(\n           ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1259, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1047, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2137, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2109, in completion\n    response = openai_chat_completions.completion(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 756, in completion\n    raise OpenAIError(\nlitellm.llms.openai.common_utils.OpenAIError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\primitives\\module.py\", line 78, in __call__\n    return self.forward(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\predict\\predict.py\", line 192, in forward\n    completions = adapter(lm, lm_kwargs=config, signature=signature, demos=demos, inputs=kwargs)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\chat_adapter.py\", line 47, in __call__\n    return JSONAdapter()(lm, lm_kwargs, signature, demos, inputs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\json_adapter.py\", line 82, in __call__\n    return super().__call__(lm, lm_kwargs, signature, demos, inputs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\chat_adapter.py\", line 46, in __call__\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\chat_adapter.py\", line 38, in __call__\n    return super().__call__(lm, lm_kwargs, signature, demos, inputs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\adapters\\base.py\", line 127, in __call__\n    outputs = lm(messages=inputs, **lm_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\base_lm.py\", line 85, in __call__\n    response = self.forward(prompt=prompt, messages=messages, **kwargs)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 147, in forward\n    results = completion(\n              ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\cache.py\", line 235, in sync_wrapper\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 336, in litellm_completion\n    return litellm.completion(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1351, in wrapper\n    return litellm.completion_with_retries(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3771, in completion_with_retries\n    return retryer(original_function, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 475, in __call__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 478, in __call__\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1371, in wrapper\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys."}}], "status": {"code": "STATUS_CODE_ERROR", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"LLM\"", "mlflow.spanInputs": "{\"text\": \"I am interested in space\"}", "signature": "\"text -> label\""}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "BIxeDrqQ0Iw=", "parent_span_id": "lUmSWJhyi6s=", "name": "ChatAdapter.format", "start_time_unix_nano": 1761381975114220400, "end_time_unix_nano": 1761381975115625000, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"TextClassificationSignature(text -> label\\n    instructions='Given the fields `text`, produce the fields `label`.'\\n    text = Field(annotation=str required=True json_schema_extra={'__dspy_field_type': 'input', 'prefix': 'Text:', 'desc': '${text}'})\\n    label = Field(annotation=str required=True json_schema_extra={'desc': \\\"Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\\", '__dspy_field_type': 'output', 'prefix': 'Label:'})\\n)\", \"demos\": [], \"inputs\": {\"text\": \"I am interested in space\"}}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\n[[ ## text ## ]]\\n{text}\\n\\n[[ ## label ## ]]\\n{label}\\n\\n[[ ## completed ## ]]\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with the corresponding output fields, starting with the field `[[ ## label ## ]]`, and then ending with the marker for `[[ ## completed ## ]]`.\"}]"}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "RSp7uIegPLM=", "parent_span_id": "lUmSWJhyi6s=", "name": "LM.__call___1", "start_time_unix_nano": 1761381975116654800, "end_time_unix_nano": 1761381979708087300, "events": [{"name": "exception", "time_unix_nano": 1761381979707086, "attributes": {"exception.message": "litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.", "exception.type": "BadRequestError", "exception.stacktrace": "Traceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 745, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 673, in completion\n    ) = self.make_sync_openai_chat_completion_request(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\logging_utils.py\", line 237, in sync_wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 489, in make_sync_openai_chat_completion_request\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 471, in make_sync_openai_chat_completion_request\n    raw_response = openai_client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_legacy_response.py\", line 364, in wrapped\n    return cast(LegacyAPIResponse[R], func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 286, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1156, in create\n    return self._post(\n           ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1259, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1047, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2137, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2109, in completion\n    response = openai_chat_completions.completion(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 756, in completion\n    raise OpenAIError(\nlitellm.llms.openai.common_utils.OpenAIError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\base_lm.py\", line 85, in __call__\n    response = self.forward(prompt=prompt, messages=messages, **kwargs)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 147, in forward\n    results = completion(\n              ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\cache.py\", line 235, in sync_wrapper\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 336, in litellm_completion\n    return litellm.completion(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1351, in wrapper\n    return litellm.completion_with_retries(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3771, in completion_with_retries\n    return retryer(original_function, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 475, in __call__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 478, in __call__\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1371, in wrapper\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys."}}], "status": {"code": "STATUS_CODE_ERROR", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"CHAT_MODEL\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\n[[ ## text ## ]]\\n{text}\\n\\n[[ ## label ## ]]\\n{label}\\n\\n[[ ## completed ## ]]\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with the corresponding output fields, starting with the field `[[ ## label ## ]]`, and then ending with the marker for `[[ ## completed ## ]]`.\"}], \"prompt\": null}", "temperature": "0.1", "max_tokens": "500", "model": "\"openai/gpt-4o-mini\"", "model_type": "\"chat\"", "cache": "true", "mlflow.message.format": "\"dspy\""}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "2y0Fxn60I2w=", "parent_span_id": "lUmSWJhyi6s=", "name": "JSONAdapter.format_1", "start_time_unix_nano": 1761381979711087600, "end_time_unix_nano": 1761381979715094100, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"args\": [\"TextClassificationSignature(text -> label\\n    instructions='Given the fields `text`, produce the fields `label`.'\\n    text = Field(annotation=str required=True json_schema_extra={'__dspy_field_type': 'input', 'prefix': 'Text:', 'desc': '${text}'})\\n    label = Field(annotation=str required=True json_schema_extra={'desc': \\\"Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\\", '__dspy_field_type': 'output', 'prefix': 'Label:'})\\n)\", [], {\"text\": \"I am interested in space\"}]}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"label\\\": \\\"{label}\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with a JSON object in the following order of fields: `label`.\"}]"}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "u9AjTSo+bwQ=", "parent_span_id": "2y0Fxn60I2w=", "name": "JSONAdapter.format_2", "start_time_unix_nano": 1761381979715094100, "end_time_unix_nano": 1761381979715094100, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"TextClassificationSignature(text -> label\\n    instructions='Given the fields `text`, produce the fields `label`.'\\n    text = Field(annotation=str required=True json_schema_extra={'__dspy_field_type': 'input', 'prefix': 'Text:', 'desc': '${text}'})\\n    label = Field(annotation=str required=True json_schema_extra={'desc': \\\"Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\\", '__dspy_field_type': 'output', 'prefix': 'Label:'})\\n)\", \"demos\": [], \"inputs\": {\"text\": \"I am interested in space\"}}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"label\\\": \\\"{label}\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with a JSON object in the following order of fields: `label`.\"}]"}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "yFkmjkmr2TI=", "parent_span_id": "lUmSWJhyi6s=", "name": "LM.__call___2", "start_time_unix_nano": 1761381979716388300, "end_time_unix_nano": 1761381983827732800, "events": [{"name": "exception", "time_unix_nano": 1761381983827732, "attributes": {"exception.message": "litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.", "exception.type": "BadRequestError", "exception.stacktrace": "Traceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 745, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 673, in completion\n    ) = self.make_sync_openai_chat_completion_request(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\logging_utils.py\", line 237, in sync_wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 489, in make_sync_openai_chat_completion_request\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 471, in make_sync_openai_chat_completion_request\n    raw_response = openai_client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_legacy_response.py\", line 364, in wrapped\n    return cast(LegacyAPIResponse[R], func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 286, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1156, in create\n    return self._post(\n           ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1259, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1047, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2137, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2109, in completion\n    response = openai_chat_completions.completion(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 756, in completion\n    raise OpenAIError(\nlitellm.llms.openai.common_utils.OpenAIError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\base_lm.py\", line 85, in __call__\n    response = self.forward(prompt=prompt, messages=messages, **kwargs)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 147, in forward\n    results = completion(\n              ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\cache.py\", line 235, in sync_wrapper\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 336, in litellm_completion\n    return litellm.completion(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1351, in wrapper\n    return litellm.completion_with_retries(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3771, in completion_with_retries\n    return retryer(original_function, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 475, in __call__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 478, in __call__\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1371, in wrapper\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys."}}], "status": {"code": "STATUS_CODE_ERROR", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"CHAT_MODEL\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"label\\\": \\\"{label}\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with a JSON object in the following order of fields: `label`.\"}], \"prompt\": null, \"response_format\": \"<class 'dspy.adapters.json_adapter.DSPyProgramOutputs'>\"}", "temperature": "0.1", "max_tokens": "500", "model": "\"openai/gpt-4o-mini\"", "model_type": "\"chat\"", "cache": "true", "mlflow.message.format": "\"dspy\""}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "G/eT/gGXDTU=", "parent_span_id": "lUmSWJhyi6s=", "name": "JSONAdapter.format_3", "start_time_unix_nano": 1761381983828732800, "end_time_unix_nano": 1761381983830732800, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"args\": [\"TextClassificationSignature(text -> label\\n    instructions='Given the fields `text`, produce the fields `label`.'\\n    text = Field(annotation=str required=True json_schema_extra={'__dspy_field_type': 'input', 'prefix': 'Text:', 'desc': '${text}'})\\n    label = Field(annotation=str required=True json_schema_extra={'desc': \\\"Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\\", '__dspy_field_type': 'output', 'prefix': 'Label:'})\\n)\", [], {\"text\": \"I am interested in space\"}]}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"label\\\": \\\"{label}\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with a JSON object in the following order of fields: `label`.\"}]"}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "kSkG/QBw0wY=", "parent_span_id": "G/eT/gGXDTU=", "name": "JSONAdapter.format_4", "start_time_unix_nano": 1761381983829732700, "end_time_unix_nano": 1761381983830732800, "events": [], "status": {"code": "STATUS_CODE_OK", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"PARSER\"", "mlflow.spanInputs": "{\"signature\": \"TextClassificationSignature(text -> label\\n    instructions='Given the fields `text`, produce the fields `label`.'\\n    text = Field(annotation=str required=True json_schema_extra={'__dspy_field_type': 'input', 'prefix': 'Text:', 'desc': '${text}'})\\n    label = Field(annotation=str required=True json_schema_extra={'desc': \\\"Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\\", '__dspy_field_type': 'output', 'prefix': 'Label:'})\\n)\", \"demos\": [], \"inputs\": {\"text\": \"I am interested in space\"}}", "mlflow.spanOutputs": "[{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"label\\\": \\\"{label}\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with a JSON object in the following order of fields: `label`.\"}]"}}, {"trace_id": "EwGmyG1evNVaxnuYfO5nmg==", "span_id": "Kqya/FR3ZaU=", "parent_span_id": "lUmSWJhyi6s=", "name": "LM.__call___3", "start_time_unix_nano": 1761381983830732800, "end_time_unix_nano": 1761381987922370300, "events": [{"name": "exception", "time_unix_nano": 1761381987921370, "attributes": {"exception.message": "litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.", "exception.type": "BadRequestError", "exception.stacktrace": "Traceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 745, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 673, in completion\n    ) = self.make_sync_openai_chat_completion_request(\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\logging_utils.py\", line 237, in sync_wrapper\n    result = func(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 489, in make_sync_openai_chat_completion_request\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 471, in make_sync_openai_chat_completion_request\n    raw_response = openai_client.chat.completions.with_raw_response.create(\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_legacy_response.py\", line 364, in wrapped\n    return cast(LegacyAPIResponse[R], func(*args, **kwargs))\n                                      ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_utils\\_utils.py\", line 286, in wrapper\n    return func(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\resources\\chat\\completions\\completions.py\", line 1156, in create\n    return self._post(\n           ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1259, in post\n    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\openai\\_base_client.py\", line 1047, in request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.AuthenticationError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2137, in completion\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 2109, in completion\n    response = openai_chat_completions.completion(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\llms\\openai\\openai.py\", line 756, in completion\n    raise OpenAIError(\nlitellm.llms.openai.common_utils.OpenAIError: Error code: 401 - {'error': {'message': \"You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 343, in sync_wrapper\n    raise exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\utils\\callback.py\", line 339, in sync_wrapper\n    results = fn(instance, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\base_lm.py\", line 85, in __call__\n    response = self.forward(prompt=prompt, messages=messages, **kwargs)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 147, in forward\n    results = completion(\n              ^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\cache.py\", line 235, in sync_wrapper\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\dspy\\clients\\lm.py\", line 336, in litellm_completion\n    return litellm.completion(\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1351, in wrapper\n    return litellm.completion_with_retries(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3771, in completion_with_retries\n    return retryer(original_function, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 475, in __call__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\concurrent\\futures\\_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\tenacity\\__init__.py\", line 478, in __call__\n    result = fn(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1371, in wrapper\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\utils.py\", line 1244, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\main.py\", line 3733, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2273, in exception_type\n    raise e\n  File \"c:\\Users\\benja\\anaconda3\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 392, in exception_type\n    raise BadRequestError(\nlitellm.exceptions.BadRequestError: litellm.BadRequestError: OpenAIException - You didn't provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you're accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys."}}], "status": {"code": "STATUS_CODE_ERROR", "message": ""}, "attributes": {"mlflow.traceRequestId": "\"tr-1301a6c86d5ebcd55ac67b987cee679a\"", "mlflow.spanType": "\"CHAT_MODEL\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"Your input fields are:\\n1. `text` (str):\\nYour output fields are:\\n1. `label` (str): Label of predicted class. Possible labels are {'grain', 'ship', 'crude', 'earn', 'trade', 'acq', 'money-fx', 'interest'}\\nAll interactions will be structured in the following way, with the appropriate values filled in.\\n\\nInputs will have the following structure:\\n\\n[[ ## text ## ]]\\n{text}\\n\\nOutputs will be a JSON object with the following fields.\\n\\n{\\n  \\\"label\\\": \\\"{label}\\\"\\n}\\nIn adhering to this structure, your objective is: \\n        Given the fields `text`, produce the fields `label`.\"}, {\"role\": \"user\", \"content\": \"[[ ## text ## ]]\\nI am interested in space\\n\\nRespond with a JSON object in the following order of fields: `label`.\"}], \"prompt\": null, \"response_format\": {\"type\": \"json_object\"}}", "temperature": "0.1", "max_tokens": "500", "model": "\"openai/gpt-4o-mini\"", "model_type": "\"chat\"", "cache": "true", "mlflow.message.format": "\"dspy\""}}]}